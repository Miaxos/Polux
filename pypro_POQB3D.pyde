cb = "BYBOWBGYBOWYRBOWWRYGYGGWRRRGBGWOOWOGWRYOBWGORRYGYYRBBO/BYBOWBWGOOWBORYGWRYGYGGYBRRYBGWOOWOGRRWRBWGORYWGYYRBBO/BYBOWBWGOOWBORYGWRYGYGGYBRRYBGWOOGORWOGRRWRBWBYYBYWORG/BYBOWBRYBOWBWBOWWRYGYGGYORRGBGWOOGOYGRYORWRBWRYGBYWORG/BYBOWBRYBOWBWBOWWRYGYGGYORRGBGWOOGRYORWRBWGOYGWGYYRRBO/BYBOWBYYBOWGOOWRWRYGYGGWRRBYBGWOOGRGWROBBWGOYRGWYYRRBO/BYBOWBGWGOWRWROYWRYGYGGGRROYBGWOOGRWOBWBBWGOYBYRYYRRBO/YYBOWBYWGGGOBROYWRYGRRGWOROYBGWOYWGRGBWBBWGOBWYRRYROBO/YYBOWBYYBGGGOOWRWRYGRRGWRRBYBGWOYWGYBOGWBWGOBOWRRYROBO/YYBOWBYYBGGGOOWRWRYGRRGWRRBYBGWOYGOBWGYBOGWBWOROBYWORR/YYBOWBBWGGGOWROYWRYGRRGRGROYBGWOYGOOYBWBOGWBWBYRBYWORR/YYBOWBBWGGGOWROYWRYGRRGRGROYBGWOYWBWGOOYBWBOGOBBRYYRWR/RGWOWBBWGBGOWROYWRBWYYGRGROYBWOOGYBWGOOYBRGYROBBRYYGRW/RWROWBBWGWGOWROYWWGOBGGRGROYBRYOWRBWGOOYBGRGYOBBRYYBYY/RWOOWOBWOWGOWRBYYYGOBGGRGRYBBWBOWRBWGOYGRWRGYOBRRYYBYG/RGWOWOBWOBGOWRBYYRBWYYGRGRYBBWOOGGBWGOYGROGBROBRRYYWWY/RGWOWOBWOBGOWRBYYRBWYYGRGRYBBWOOGGBRGBWGOYGROWROWYBYYR/RWYOWOBWOWGOWRBYYRGOBGGRGRYBBYROWRBRGBWGOYOGYWROWYBBYG/RWYOWOBWOWGOWRBYYRGOBGGRGRYBBYROWOGYRBRGBWGOYBWWYYRGBO/RWYOWOBWOWGOWRBYYRGOBGGRGRYBBYROWGOYOGYRBRGBWGYBBYWORW/RWBOWYBWYWGOWRBRBYOOBGGRGRWBBYOOWGOYOGWRYRYBWGYGBYRORG/RWBOWWBWWWGOWRGRBRYOBGGRGRRYBBYOWGOYOGGRYYBBWGYYBYOORO/WWBGWWOWWORYGRGRBRYOBGGOBRRYBBYOOWGGOGGRYYBBRWYYWYOBRO/WWBGWWOWWORYGRGRBRYOBGGOBRRYBBYOOBBRWGGOGGRYYBWWRYYOOY/YWBOWWBWWBGOWRGRBRYOOBGRGRRYBBYORROYOGGOGGRYBGWWBYYWOY/YWBOWWBWWBGOWRGRBRYOOBGRGRRYBBYOROGGOGGRYBROYWYYWYOGBW/YWBRWWOWWOBBYRGRBRYOGGGGORRYBBYOWGROBGGRYBROWWYYGYOOBW/WWBWWWGWWGGOYRGRBRYOORGBRRRYBBYOGOGBOGGRYBROWYYYOYOBBW/WWBWWWGWWGGOYRGRBRYOORGBRRRYBBYOGOGGRYBROWOGBYOWYYBYOB/WWGWWRGWBGGOYRWRYRWOORGBRRBOBBWOGOGGRYBWBRBGBYOOYYYYOY/WWGWWRGWBGGOYRWRYRWOORGBRRBOBBWOGBGBOGGRYBWBRYYYOYOYYO/WWWWWWGWWGGOYRGRBBOOORGBRRRYBYOOGBGBOGBRORYBRYYWOYBYYG/WWWWWWGWWGGOYRGRBBOOORGBRRRYBYOOGOGBRORYBRBGBWBGYYYYOY/BWWGWWOWWORGWRGRBBOOYGGGWRRYBYOOYBBOGORYBRBGWYBGRYYROY/BWWGWWOWWORGWRGRBBOOYGGGWRRYBYOOYBGWBBOGORYBRRRYOYBYYG/BWWGWWOWWORGWRGRBBOOYGGGWRRYBYOOYYBRBGWBBOGORYORYYRGBY/WWWWWWBWWGGRYRGRBBOOORGBYRRYBYOOGOGYGGWBBOGOBRORYYRYBY/WWWWWWYBRGGRGYYBBBOOORGOGRRWBYOOGOGRWRGWBOGOBBYRYYRYBY/WWWWWWYBRGGRGYYBBBOOORGOGRRWBYOOGGOBOGRWRGWBOYYBBYYYRR/WWWWWWBWWGGRYRRBBBOOORGBYRGYBYOOGGOYGGOYRGWBOROBBYYYRR/WWWWWWBWWGGRYRRBBBOOORGBYRGYBYOOGWBOGOYGGOYRGYBRRYORYB/WWWWWWBWWGGRYRRBBBOOORGBYRGYBYOOGYRGWBOGOYGGORRYYYBBOR/WWWWWWBYGGGWRGOYBBOOORGWRRBRBYOOGYRBYYWROYGGORBGYYBBOR/WWWWWWBYGGGWRGOYBBOOORGWRRBRBYOOGYYWROYGGOYRBGBRBYORYB/WWWWWWWWWGGGRRRBBBOOORGBORGYBYOOGYYRYBOGGOYRBGRYBYORYB/WWWWWWWWWGGGRRRBBBOOORGBORGYBYOOGYRBYYRYBOGGORBGYYRBOY/WWWWWWWWWGGGRRRBBBOOORGBORGYBYOOGGGOYRBYYRYBOBYROYBYRG/WWWWWWOBGGGBYORWBBOOORGYRRRWBYOOGGGRBGRWYRYBOYYBOYBYRG/WWWWWWOBGGGBYORWBBOOORGYRRRWBYOOGBGRWYRYBOGGRBBGYYRYOY/WWWWWWWWYGGGRRRGBBOOORGBORYBBYOOGBGOYRWBBOGGRBYRYYRYOY/WWWWWWWWYGGGRRRGBBOOORGBORYBBYOOGYRWBBOGGRBGORRYYYOBYY/WWBWWOWWOGGGRRWBYRYOORGBORWBBGOOGYRWBBYGBGYGORRRYYYBYO/WWBWWOWWOGGGRRWBYRYOORGBORWBBGOOGYGOYRWBBYGBGBYRYYROYR/WWWWWWWWWGGGRRRBBBOOORGBORRBBYOOGYGOYRRYGRBBGBYGYYOOYY/WWWWWWWWWGGGRRRBBBOOORGBORRBBYOOGYRRYGRBBGYGOGOYYYYBYO/BYGWWWWWWWGGRRRBBOYOOWGBORRBBYGOOWRRYGRBBBOGOGOYYYYGRY/BYGWWWWWWWGGRRRBBOYOOWGBORRBBYGOOYGRBBBOGOWRRYYYOYRGYG/YWWWWWWWWGGGRRRBBBOORYGBORRBBYOORGGRBBBOGGYGWYYYOYROYO/YWWWWWWWWGGGRRRBBBOORYGBORRBBYOORBBBOGGYGWGGRYROYYYYOO/RWWOWWOWWGBBYRRBBBOOWGGBYRRBBYOOWGYBYGGYGWGGYRRORYYROO/RWWOWWOWWGBBYRRBBBOOWGGBYRRBBYOOWGGYGYBYGGYGWRRROYROYO/WWWWWWWWWGGGRRRBBBOOOGGBORRBBYOOOYBBOYBYGGYGRYRRYYRGYO/WWWWWWWWWGGGRRRBBBOOOGGBORRBBYOOOYGRYBBOYBYGGGYYYYRORR/WWWWWWBBOGGWRRBYBBOOOGGWRRBYBYOOOYGWROYGYBYGGGBRYYRORR/WWWWWWBBOGGWRRBYBBOOOGGWRRBYBYOOOYGGYGWROYGYBOYGRYBRRR/WWWWWWGWWGGOYRRBBBOOOGGYGRRBBYOOOYGGWBBOOYGYBRYYRYBRRR/WWWWWWGWWGGOYRRBBBOOOGGYGRRBBYOOOGYBYGGWBBOOYRRRRYYRBY/YWWOWWOWWGGGWRRBBBOORYGGWRRBBYOORBYOGGGWBBOORYRRGYYYBY/YWWOWWOWWGGGWRRBBBOORYGGWRRBBYOORGGGWBBOORBYORYYRYBYGY/WWWWWWWWWGGGRRRBBBOOOGGGRRRBBYOOOGYGYBBOORBYYOYYRYBRGY/WWWWWWWWWGGGRRRBBBOOOGGGRRRBBYOOOBYYGYGYBBOORRROGYYYBY/WWWWWWWWWGGGRRRBBBOOOGGGRRRBBYOOOOORBYYGYGYBBYGRBYRYYO/WWRWWRWWYGGGRRRGBBWOOGGGRRRYBBWOOOORBYOGYBWBBYGYBYOYYO/WWRWWRWWYGGGRRRGBBWOOGGGRRRYBBWOOBYOGYBWBBOORYOOGYYYBY/WWOWWWWWWGGGRRRBBBYOOGGGRRRBBBYOOBYOGYYGYWOORYORGYRYBB/WWOWWWWWWGGGRRRBBBYOOGGGRRRBBBYOOGYYGYWOORBYORRBOYBYGY/GGGWWWWWWYGGRRRBBWOOOGGGRRRBBWOOYYYYGYWOOOYYBRRBOYBRBB/GGGWWWWWWYGGRRRBBWOOOGGGRRRBBWOOYYYBYYYGYWOOORORBYRBBB/WWWWWWWWWGGGRRRBBBOOOGGGRRRBBBOOOGYBYYYGYBOYORORBYRYGY/WWWWWWBGGGGRYRRWBBOOOGGOYRRWBBOOOGYRYRRWYBOYOGBBBYRYGY/OWWOWWOGGGGGWRRWBBOOYYGGWRRWBBOOBRORBRRWYBOYGYBBYYRYGY/OWWOWWOGGGGGWRRWBBOOYYGGWRRWBBOOBOYGRORBRRWYBYYYGYBYRB/WWWWWWRGGGGGYRRWBBOOOGGYGRRWBBOOOGYOYORBRRWYOBYYBYBYRB/WWWWWWRGGGGGYRRWBBOOOGGYGRRWBBOOOYORBRRWYOGYOYBBYYRBBY/WWWWWWWWWGGGRRRBBBOOOGGGRRRBBBOOOYORYGBYYOGYOGYRYYRBBY/BBOWWWWWWWGGRRRBBYGOOWGGRRRBBBYOOWORYGBYYBOOOGYRYYRGGY/BBOWWWWWWWGGRRRBBYGOOWGGRRRBBBYOOOOOWORYGBYYBGYGGYYYRR/BBRWWRWWRWGGRRGYBBWOOWGGRRYGBBWOOOOOWORBBYOYBGYYGYYYRG/BBRWWRWWRWGGRRGYBBWOOWGGRRYGBBWOOWORBBYOYBOOOYYGYYRGGY/BBOWWWWWWWGGRRRBBBYOOWGGRRRBBYROOWORBBRYGOGOOYYGYYYGGY/WWWWWWWWWGGGRRRBBBOOOGGGRRRBBBOOOYORBBRYGOYRGYYGYYYOYB/WWWWWWWWWGGGRRRBBBOOOGGGRRRBBBOOOBBRYGOYRGYORGYBYYYYYO/RWWRWWYWWGGRGRRBBBOOWGGBYRRBBBOOWGGBYGOYRGYOWRYBOYYOYO/RWWRWWYWWGGRGRRBBBOOWGGBYRRBBBOOWYOWGGBYGOYRGOORYYYOYB/RWWRWWYWWGGRGRRBBBOOWGGBYRRBBBOOWYRGYOWGGBYGOOYOYYOBYR/OWWWWWWWWYGGRRRBBBOOBRGGRRRBBBOOYGBRYOWGGBYGOGYOYYOYYR/OWWWWWWWWYGGRRRBBBOOBRGGRRRBBBOOYYGOGBRYOWGGBYYGYYYROO/RWWRWWGWWGGOYRRBBBOOWGGGYRRBBBOOWYRYRBRYOWGGOBYGYYYBOO/RWWRWWGWWGGOYRRBBBOOWGGGYRRBBBOOWGGOYRYRBRYOWBYBOYYOYG/WWWWWWWWWGGGRRRBBBOOOGGGRRRBBBOOOOGOGRYRBRYOBYYBYYYYYG/BWWOWWOWWOGGWRRBBBOOYGGGWRRBBBOOYOGGWRYRBRYOYRYBRYYGYG/BWWOWWOWWOGGWRRBBBOOYGGGWRRBBBOOYWRYRBRYOYOGGBYGYYYRRG/BWOOWOOWOOGGWRWBBYGOYGGGWRWBBOYOYWRYRBWBBYGGGBYRYYRRRR/BWOOWOOWOOGGWRWBBYGOYGGGWRWBBOYOYGGGWRYRBWBBYRYBRYYRRR/WWOWWOWWOGGGRRWBBYGOOGGGRRWBBOYOOOGGRRYRBWBBBYYBYYYYRR/WWOWWOWWOGGGRRWBBYGOOGGGRRWBBOYOORRYRBWBBBOGGBYRYYRYYY/WWWWWWWWWGGGRRRBBBOOOGGGRRRBBBOOORRYRBYBOYOGGBYOYYYYYG/WWWWWWWWWGGGRRRBBBOOOGGGRRRBBBOOOOGGRRYRBYBOYYYBYYYGYO/OGGWWWWWWGGGRRRBBWOOYYGGRRRBBWOOOOGGRRYRBWOOBYYBYYYYBB/GWWGWWOWWOOYGGGRRRBBWYGGRRRBBWOOOOGGRRYRBWOOBYYBYYYYBB/RWWGWWOWWWOYGGGRRBOOBWGGRRRBBBOOBGGGRRYRBYBOWYYBYYYOYO/OGRWWWWWWGGGRRBOOBWOYWGGRRRBBBOOBGGGRRYRBYBOWYYBYYYOYO/GWGWWWWWWOGGRRBOOOYBWYGGRRRBBGOOOOGGRRYRBRWOBYYBYYYYBB/GWWWWWGWWYBWOGGRRBOOOYGGRRRBBGOOOOGGRRYRBRWOBYYBYYYYBB/BGRWWWGWWWBWOGGRRBWOOWGGRRRBBBOOOGGGRRYRBYBOOYYBYYYYYO/GWBWWGWWROGGRRBWOOWBWWGGRRRBBBOOOGGGRRYRBYBOOYYBYYYYYO/GWBWWGWWROGGRRBWOOWBWWGGRRRBBBOOOBOOGGGRRYRBYYYYYYYOYB/BWOWWGWWROGGRRBWOGWOYYGGRRRBBWBOBBOOGGGRRBWORYYYYYYYBO/OGRWWWBWWWOYOGGRRBWOGYGGRRRBBWBOBBOOGGGRRBWORYYYYYYYBO/BWBWWWBWWROYOGGRROWBWGGGRRRBBBOOOOOOGGGRRYRBGYYYYYYWYB/BWBWWWWWBOGGRROWBWROYGGGRRRBBBOOOOOOGGGRRYRBGYYYYYYWYB/OGOWWWWWBWGGRROWBBYOGYGGRRRBBWOOBBOOGGGRRBRORYYYYYYYBW/OWBGWWOWWYOGWGGRROWBBYGGRRRBBWOOBBOOGGGRRBRORYYYYYYYBW/OWBGWWOWWBOGWGGRRWROWWGGRRRBBBOOBOOOGGGRRYRBBYYYYYYYYB/OGOWWWWWBWGGRRWROWBOGWGGRRRBBBOOBOOOGGGRRYRBBYYYYYYYYB/OGOWWWWWBWGGRRWROWBOGWGGRRRBBBOOBRBBOOOGGGRRYYYYYYYBYY/RWWWWWWWBBGGRRWROOGBYYGGRRRBBGOORYBBOOOGGOBORYYYYYYGBW/WWBWWWRWWGBYBGGRRWROOYGGRRRBBGOORYBBOOOGGOBORYYYYYYGBW/WGOWWWRWWBBYBGGRRWBORWGGRRRBBBOOOWBBOOOGGGRROYYYYYYGYY/RWWWWGWWOBGGRRWBORBBYWGGRRRBBBOOOWBBOOOGGGRROYYYYYYGYY/WWBWWGWWOGGGRRWBORYOOYGGRRRBBWBORYBBOOOGGWBORYYYYYYGBR/BGOWWWWWWYOOGGGRRWBORYGGRRRBBWBORYBBOOOGGWBORYYYYYYGBR/WWWWWWWWWOOOGGGRRRBBBGGGRRRBBBOOOBBBOOOGGGRRRYYYYYYYYY/WWWWWWWWWGGGRRRBBBOOOGGGRRRBBBOOOBBBOOOGGGRRRYYYYYYYYY/WWWWWWWWWGGGRRRBBBOOOGGGRRRBBBOOORRRBBBOOOGGGYYYYYYYYY/WWWWWWWWWGGGRRRBBBOOOGGGRRRBBBOOOGGGRRRBBBOOOYYYYYYYYY-F'-D-F-D'-F-F-L-F'-D-F-D-B-B-R-B'-D-B-D-D-R-R-L'-D-L-D'-L-L-D'-R-D-R'-D'-L-D-D-L'-F-D-F'-D-D-F'-D'-F-D-D-F-D'-F'-D'-R'-D-R-D'-B-D'-B'-D'-L'-D-L-D-F'-D-F-D-L-D'-L'-D-D-R-D'-R'-D'-B'-D-B-F-L-D-L'-D'-F'-B-D-R-D'-R'-B'-D'-L'-D-D-L-D-L'-D-L-L-D'-R'-D-L'-D'-R-D-B'-U'-B-U-B'-U'-B-U-D-B'-U'-B-U-B'-U'-B-U-D-B'-U'-B-U-B'-U'-B-U-D-D"
mvs = cb.split("-")
cbs = mvs[0].split("/")
mvs = mvs[1:]
tpm = 600
tmx = len(mvs) * tpm
iv = 1 # (/100)
sz = 50
si = sz - iv
cls = "WGRBOY*"
clrs = [color(255), color(0, 255, 0), color(255, 0, 0), color(0, 0, 255), color(255, 128, 0), color(255, 255, 0), color(0)]
scx=5
lns=len(open("POQB2.pyde").readlines())
run, ini = False, 0
rox, roy, lmx, lmy, llmx, llmy, sca = 0, 0, 0, 0, 0, 0, 1
th = 0

def setup():
  size(800, 600, P3D)
  lights()

def millis_():
    return millis()-ini if run else ini

def keyPressed():
  if key != 'a': return
  global run, ini
  run = True
  ini = millis()

def mouseWheel(event):
  global sca
  e = event.getCount()
  sca += -0.2 * e
  sca = max(min(sca, 6), 0.4)

def mouseMoved():
  global lmx, lmy, llmx, llmy
  lmx = llmx
  llmx = mouseX
  lmy = llmy
  llmy = mouseY

def mouseDragged():
  global rox, roy, lmx, lmy, llmx, llmy
  rox += (mouseX - lmx)
  roy += (lmy - mouseY)
  lmx = llmx
  llmx = mouseX
  lmy = llmy
  llmy = mouseY


def draw():
  r = 0
  if millis_() < tmx:
    n = int(millis_() / tpm)
    move = mvs[n]
    mr = len(move) == 2
    move = move[0]
    c = cbs[n]
    r = (millis_() - n * tpm) * HALF_PI / tpm
    if mr:
        r *= -1
  else:
    c = cbs[-1]

  def setColor(face, x, y, tr=255):
    col = '*'
    if face == 0:
      col = c[y * 3 + x]
    elif face == 5:
      col = c[y * 3 + x + 45]
    else:
      col = c[y * 12 + x + face * 3 + 6]
    rgb = clrs[cls.find(col)]
    fill(color(red(rgb), green(rgb), blue(rgb), tr))
  background(204)
  fill(0)
  text(str(int(frameRate))+" FPS", 50, 50)
  text(str(int(millis_() / tpm) if millis_()<tmx else len(mvs))+" moves", 50, 64)
  text(str(lns-2)+" lines", 50, 78)
  
  noStroke();
  for x in range(3):
    for y in range(3):
      fill(clrs[cls.find(c[y*3+x])])
      rect(38+12*x, height-108+12*y, 10, 10)
      for i in range(4):
        fill(clrs[cls.find(c[y*12+i*3+x+9])])
        rect(2+36*i+12*x, height-72+12*y, 10, 10)
      fill(clrs[cls.find(c[y*3+x+45])])
      rect(38+12*x, height-36+12*y, 10, 10)
          
  
  translate(width / 2, height / 2, 0)
  rotateX(radians(roy / 10))
  rotateY(radians(rox / 10))
  scale(sca)
  strokeWeight(scx if scx>=0 else 1/sca)
  for x in range(3):
    for y in range(3):
      for z in range(3):
          pushMatrix()
          if millis_() < tmx:
              if move == 'U' and y == 0:
                  rotateY(-r)
              if move == 'L' and x == 0:
                  rotateX(-r)
              if move == 'F' and z == 2:
                  rotateZ(r)
              if move == 'R' and x == 2:
                  rotateX(r)
              if move == 'B' and z == 0:
                  rotateZ(-r)
              if move == 'D' and y == 2:
                  rotateY(r)
          translate(x * 100 - 100, y * 100 - 100, z * 100 - 100)
          # -Y -X +Z +X -Z +Y  -  +
          #  U  L  F  R  B  D  0  2
          sz = si
          tr = 255
          noFill()
          stroke(0)
          
          fill(0)  # White | Up
          if y == 0: setColor(0, x, z, tr)
          beginShape()
          vertex( si,-sz, si)
          vertex( si,-sz,-si)
          vertex(-si,-sz,-si)
          vertex(-si,-sz, si) 
          endShape(CLOSE)
          
          fill(0) # Green | Left
          if x==0: setColor(1, z, y, tr)
          beginShape()
          vertex(-sz, si, si)
          vertex(-sz, si,-si)
          vertex(-sz,-si,-si)
          vertex(-sz,-si, si) 
          endShape(CLOSE)
          
          fill(0) # Red | Front
          if z==2: setColor(2, x, y, tr)
          beginShape()
          vertex( si, si, sz)
          vertex( si,-si, sz)
          vertex(-si,-si, sz)
          vertex(-si, si, sz) 
          endShape(CLOSE)
          
          fill(0) # Blue | Right
          if x==2: setColor(3, 2-z, y, tr)
          beginShape()
          vertex( sz, si, si)
          vertex( sz, si,-si)
          vertex( sz,-si,-si)
          vertex( sz,-si, si) 
          endShape(CLOSE)
          
          fill(0) # Orange | Back
          if z==0: setColor(4, 2-x, y, tr)
          beginShape()
          vertex( si, si,-sz)
          vertex( si,-si,-sz)
          vertex(-si,-si,-sz)
          vertex(-si, si,-sz) 
          endShape(CLOSE)
          
          fill(0) # Yellow | Down
          if y==2: setColor(5, x, 2-z, tr)
          beginShape()
          vertex( si, sz, si)
          vertex( si, sz,-si)
          vertex(-si, sz,-si)
          vertex(-si, sz, si) 
          endShape(CLOSE)
          
          
          popMatrix()